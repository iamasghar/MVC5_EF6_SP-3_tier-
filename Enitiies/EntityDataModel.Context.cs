//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC5_EF6_SP_3_tier_.Enitiies
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OfcDbMVCEntities : DbContext
    {
        public OfcDbMVCEntities()
            : base("name=OfcDbMVCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<customer> customers { get; set; }
        public virtual DbSet<employee> employees { get; set; }
        public virtual DbSet<product> products { get; set; }
        public virtual DbSet<purchase> purchases { get; set; }
        public virtual DbSet<sell> sells { get; set; }
        public virtual DbSet<supplyer> supplyers { get; set; }
        public virtual DbSet<user> users { get; set; }
    
        public virtual int SP_CusDelete(Nullable<int> cusId)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("cusId", cusId) :
                new ObjectParameter("cusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CusDelete", cusIdParameter);
        }
    
        public virtual int SP_CusInsert(string cusName, string cusCell, string cusAddress, string cusCnic)
        {
            var cusNameParameter = cusName != null ?
                new ObjectParameter("cusName", cusName) :
                new ObjectParameter("cusName", typeof(string));
    
            var cusCellParameter = cusCell != null ?
                new ObjectParameter("cusCell", cusCell) :
                new ObjectParameter("cusCell", typeof(string));
    
            var cusAddressParameter = cusAddress != null ?
                new ObjectParameter("cusAddress", cusAddress) :
                new ObjectParameter("cusAddress", typeof(string));
    
            var cusCnicParameter = cusCnic != null ?
                new ObjectParameter("cusCnic", cusCnic) :
                new ObjectParameter("cusCnic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CusInsert", cusNameParameter, cusCellParameter, cusAddressParameter, cusCnicParameter);
        }
    
        public virtual ObjectResult<SP_CusSearch_Result> SP_CusSearch(Nullable<int> cusId)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("cusId", cusId) :
                new ObjectParameter("cusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CusSearch_Result>("SP_CusSearch", cusIdParameter);
        }
    
        public virtual ObjectResult<SP_CusSelect_Result> SP_CusSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CusSelect_Result>("SP_CusSelect");
        }
    
        public virtual int SP_CusUpdate(Nullable<int> cusId, string cusName, string cusCell, string cusAddress, string cusCnic)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("cusId", cusId) :
                new ObjectParameter("cusId", typeof(int));
    
            var cusNameParameter = cusName != null ?
                new ObjectParameter("cusName", cusName) :
                new ObjectParameter("cusName", typeof(string));
    
            var cusCellParameter = cusCell != null ?
                new ObjectParameter("cusCell", cusCell) :
                new ObjectParameter("cusCell", typeof(string));
    
            var cusAddressParameter = cusAddress != null ?
                new ObjectParameter("cusAddress", cusAddress) :
                new ObjectParameter("cusAddress", typeof(string));
    
            var cusCnicParameter = cusCnic != null ?
                new ObjectParameter("cusCnic", cusCnic) :
                new ObjectParameter("cusCnic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CusUpdate", cusIdParameter, cusNameParameter, cusCellParameter, cusAddressParameter, cusCnicParameter);
        }
    
        public virtual int SP_EmpDelete(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EmpDelete", empIdParameter);
        }
    
        public virtual int SP_EmpInsert(string empName, string empCell, string empAddress, string empEmail, string empPass)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var empCellParameter = empCell != null ?
                new ObjectParameter("empCell", empCell) :
                new ObjectParameter("empCell", typeof(string));
    
            var empAddressParameter = empAddress != null ?
                new ObjectParameter("empAddress", empAddress) :
                new ObjectParameter("empAddress", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("empEmail", empEmail) :
                new ObjectParameter("empEmail", typeof(string));
    
            var empPassParameter = empPass != null ?
                new ObjectParameter("empPass", empPass) :
                new ObjectParameter("empPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EmpInsert", empNameParameter, empCellParameter, empAddressParameter, empEmailParameter, empPassParameter);
        }
    
        public virtual ObjectResult<SP_EmpSearch_Result> SP_EmpSearch(Nullable<int> empId)
        {
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmpSearch_Result>("SP_EmpSearch", empIdParameter);
        }
    
        public virtual ObjectResult<SP_EmpSelect_Result> SP_EmpSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmpSelect_Result>("SP_EmpSelect");
        }
    
        public virtual ObjectResult<employee> SP_EmpUpdate(string empName, string empCell, string empAddress, string empEmail, string empPass, Nullable<int> empId)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var empCellParameter = empCell != null ?
                new ObjectParameter("empCell", empCell) :
                new ObjectParameter("empCell", typeof(string));
    
            var empAddressParameter = empAddress != null ?
                new ObjectParameter("empAddress", empAddress) :
                new ObjectParameter("empAddress", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("empEmail", empEmail) :
                new ObjectParameter("empEmail", typeof(string));
    
            var empPassParameter = empPass != null ?
                new ObjectParameter("empPass", empPass) :
                new ObjectParameter("empPass", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employee>("SP_EmpUpdate", empNameParameter, empCellParameter, empAddressParameter, empEmailParameter, empPassParameter, empIdParameter);
        }
    
        public virtual ObjectResult<employee> SP_EmpUpdate(string empName, string empCell, string empAddress, string empEmail, string empPass, Nullable<int> empId, MergeOption mergeOption)
        {
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var empCellParameter = empCell != null ?
                new ObjectParameter("empCell", empCell) :
                new ObjectParameter("empCell", typeof(string));
    
            var empAddressParameter = empAddress != null ?
                new ObjectParameter("empAddress", empAddress) :
                new ObjectParameter("empAddress", typeof(string));
    
            var empEmailParameter = empEmail != null ?
                new ObjectParameter("empEmail", empEmail) :
                new ObjectParameter("empEmail", typeof(string));
    
            var empPassParameter = empPass != null ?
                new ObjectParameter("empPass", empPass) :
                new ObjectParameter("empPass", typeof(string));
    
            var empIdParameter = empId.HasValue ?
                new ObjectParameter("empId", empId) :
                new ObjectParameter("empId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<employee>("SP_EmpUpdate", mergeOption, empNameParameter, empCellParameter, empAddressParameter, empEmailParameter, empPassParameter, empIdParameter);
        }
    
        public virtual ObjectResult<SP_Login_Result> SP_Login(string userEmail, string userPass)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Login_Result>("SP_Login", userEmailParameter, userPassParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdDelete(Nullable<int> prdId)
        {
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdDelete", prdIdParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdDelete(Nullable<int> prdId, MergeOption mergeOption)
        {
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdDelete", mergeOption, prdIdParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdInsert(string prdTitle, string prdPrice, string prdStock, string prdExpiry, string prdManuf, string prdImg)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdStockParameter = prdStock != null ?
                new ObjectParameter("prdStock", prdStock) :
                new ObjectParameter("prdStock", typeof(string));
    
            var prdExpiryParameter = prdExpiry != null ?
                new ObjectParameter("prdExpiry", prdExpiry) :
                new ObjectParameter("prdExpiry", typeof(string));
    
            var prdManufParameter = prdManuf != null ?
                new ObjectParameter("prdManuf", prdManuf) :
                new ObjectParameter("prdManuf", typeof(string));
    
            var prdImgParameter = prdImg != null ?
                new ObjectParameter("prdImg", prdImg) :
                new ObjectParameter("prdImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdInsert", prdTitleParameter, prdPriceParameter, prdStockParameter, prdExpiryParameter, prdManufParameter, prdImgParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdInsert(string prdTitle, string prdPrice, string prdStock, string prdExpiry, string prdManuf, string prdImg, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdStockParameter = prdStock != null ?
                new ObjectParameter("prdStock", prdStock) :
                new ObjectParameter("prdStock", typeof(string));
    
            var prdExpiryParameter = prdExpiry != null ?
                new ObjectParameter("prdExpiry", prdExpiry) :
                new ObjectParameter("prdExpiry", typeof(string));
    
            var prdManufParameter = prdManuf != null ?
                new ObjectParameter("prdManuf", prdManuf) :
                new ObjectParameter("prdManuf", typeof(string));
    
            var prdImgParameter = prdImg != null ?
                new ObjectParameter("prdImg", prdImg) :
                new ObjectParameter("prdImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdInsert", mergeOption, prdTitleParameter, prdPriceParameter, prdStockParameter, prdExpiryParameter, prdManufParameter, prdImgParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdSearch(Nullable<int> prdId)
        {
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdSearch", prdIdParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdSearch(Nullable<int> prdId, MergeOption mergeOption)
        {
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdSearch", mergeOption, prdIdParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdSelect");
        }
    
        public virtual ObjectResult<product> SP_PrdSelect(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdSelect", mergeOption);
        }
    
        public virtual ObjectResult<product> SP_PrdUpdate(string prdTitle, string prdPrice, string prdStock, string prdExpiry, string prdManuf, string prdImg, Nullable<int> prdId)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdStockParameter = prdStock != null ?
                new ObjectParameter("prdStock", prdStock) :
                new ObjectParameter("prdStock", typeof(string));
    
            var prdExpiryParameter = prdExpiry != null ?
                new ObjectParameter("prdExpiry", prdExpiry) :
                new ObjectParameter("prdExpiry", typeof(string));
    
            var prdManufParameter = prdManuf != null ?
                new ObjectParameter("prdManuf", prdManuf) :
                new ObjectParameter("prdManuf", typeof(string));
    
            var prdImgParameter = prdImg != null ?
                new ObjectParameter("prdImg", prdImg) :
                new ObjectParameter("prdImg", typeof(string));
    
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdUpdate", prdTitleParameter, prdPriceParameter, prdStockParameter, prdExpiryParameter, prdManufParameter, prdImgParameter, prdIdParameter);
        }
    
        public virtual ObjectResult<product> SP_PrdUpdate(string prdTitle, string prdPrice, string prdStock, string prdExpiry, string prdManuf, string prdImg, Nullable<int> prdId, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdStockParameter = prdStock != null ?
                new ObjectParameter("prdStock", prdStock) :
                new ObjectParameter("prdStock", typeof(string));
    
            var prdExpiryParameter = prdExpiry != null ?
                new ObjectParameter("prdExpiry", prdExpiry) :
                new ObjectParameter("prdExpiry", typeof(string));
    
            var prdManufParameter = prdManuf != null ?
                new ObjectParameter("prdManuf", prdManuf) :
                new ObjectParameter("prdManuf", typeof(string));
    
            var prdImgParameter = prdImg != null ?
                new ObjectParameter("prdImg", prdImg) :
                new ObjectParameter("prdImg", typeof(string));
    
            var prdIdParameter = prdId.HasValue ?
                new ObjectParameter("prdId", prdId) :
                new ObjectParameter("prdId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<product>("SP_PrdUpdate", mergeOption, prdTitleParameter, prdPriceParameter, prdStockParameter, prdExpiryParameter, prdManufParameter, prdImgParameter, prdIdParameter);
        }
    
        public virtual ObjectResult<purchase> SP_Purchase(string prdQty, Nullable<int> prdTitle)
        {
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdTitleParameter = prdTitle.HasValue ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_Purchase", prdQtyParameter, prdTitleParameter);
        }
    
        public virtual ObjectResult<purchase> SP_Purchase(string prdQty, Nullable<int> prdTitle, MergeOption mergeOption)
        {
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdTitleParameter = prdTitle.HasValue ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_Purchase", mergeOption, prdQtyParameter, prdTitleParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurDelete", idParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurDelete(Nullable<int> id, MergeOption mergeOption)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurDelete", mergeOption, idParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurInsert(string prdTitle, string prdPrice, string prdQty, string prdPerDate, string prdPerBy, string prdSup)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdPerDateParameter = prdPerDate != null ?
                new ObjectParameter("prdPerDate", prdPerDate) :
                new ObjectParameter("prdPerDate", typeof(string));
    
            var prdPerByParameter = prdPerBy != null ?
                new ObjectParameter("prdPerBy", prdPerBy) :
                new ObjectParameter("prdPerBy", typeof(string));
    
            var prdSupParameter = prdSup != null ?
                new ObjectParameter("prdSup", prdSup) :
                new ObjectParameter("prdSup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurInsert", prdTitleParameter, prdPriceParameter, prdQtyParameter, prdPerDateParameter, prdPerByParameter, prdSupParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurInsert(string prdTitle, string prdPrice, string prdQty, string prdPerDate, string prdPerBy, string prdSup, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdPerDateParameter = prdPerDate != null ?
                new ObjectParameter("prdPerDate", prdPerDate) :
                new ObjectParameter("prdPerDate", typeof(string));
    
            var prdPerByParameter = prdPerBy != null ?
                new ObjectParameter("prdPerBy", prdPerBy) :
                new ObjectParameter("prdPerBy", typeof(string));
    
            var prdSupParameter = prdSup != null ?
                new ObjectParameter("prdSup", prdSup) :
                new ObjectParameter("prdSup", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurInsert", mergeOption, prdTitleParameter, prdPriceParameter, prdQtyParameter, prdPerDateParameter, prdPerByParameter, prdSupParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurSearch(Nullable<int> searchId)
        {
            var searchIdParameter = searchId.HasValue ?
                new ObjectParameter("searchId", searchId) :
                new ObjectParameter("searchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurSearch", searchIdParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurSearch(Nullable<int> searchId, MergeOption mergeOption)
        {
            var searchIdParameter = searchId.HasValue ?
                new ObjectParameter("searchId", searchId) :
                new ObjectParameter("searchId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurSearch", mergeOption, searchIdParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurSelect");
        }
    
        public virtual ObjectResult<purchase> SP_PurSelect(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurSelect", mergeOption);
        }
    
        public virtual ObjectResult<purchase> SP_PurUpdate(string prdTitle, string prdPrice, string prdQty, string prdPerDate, string prdPerBy, string prdSup, Nullable<int> trxId)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdPerDateParameter = prdPerDate != null ?
                new ObjectParameter("prdPerDate", prdPerDate) :
                new ObjectParameter("prdPerDate", typeof(string));
    
            var prdPerByParameter = prdPerBy != null ?
                new ObjectParameter("prdPerBy", prdPerBy) :
                new ObjectParameter("prdPerBy", typeof(string));
    
            var prdSupParameter = prdSup != null ?
                new ObjectParameter("prdSup", prdSup) :
                new ObjectParameter("prdSup", typeof(string));
    
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurUpdate", prdTitleParameter, prdPriceParameter, prdQtyParameter, prdPerDateParameter, prdPerByParameter, prdSupParameter, trxIdParameter);
        }
    
        public virtual ObjectResult<purchase> SP_PurUpdate(string prdTitle, string prdPrice, string prdQty, string prdPerDate, string prdPerBy, string prdSup, Nullable<int> trxId, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdPerDateParameter = prdPerDate != null ?
                new ObjectParameter("prdPerDate", prdPerDate) :
                new ObjectParameter("prdPerDate", typeof(string));
    
            var prdPerByParameter = prdPerBy != null ?
                new ObjectParameter("prdPerBy", prdPerBy) :
                new ObjectParameter("prdPerBy", typeof(string));
    
            var prdSupParameter = prdSup != null ?
                new ObjectParameter("prdSup", prdSup) :
                new ObjectParameter("prdSup", typeof(string));
    
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<purchase>("SP_PurUpdate", mergeOption, prdTitleParameter, prdPriceParameter, prdQtyParameter, prdPerDateParameter, prdPerByParameter, prdSupParameter, trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_Sell(string prdTitle, Nullable<int> prdQty)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdQtyParameter = prdQty.HasValue ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_Sell", prdTitleParameter, prdQtyParameter);
        }
    
        public virtual ObjectResult<sell> SP_Sell(string prdTitle, Nullable<int> prdQty, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdQtyParameter = prdQty.HasValue ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_Sell", mergeOption, prdTitleParameter, prdQtyParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellDelete(Nullable<int> trxId)
        {
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellDelete", trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellDelete(Nullable<int> trxId, MergeOption mergeOption)
        {
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellDelete", mergeOption, trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellInsert(string prdTitle, string prdPrice, string prdQty, string prdSellDate, string prdSellBy)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdSellDateParameter = prdSellDate != null ?
                new ObjectParameter("prdSellDate", prdSellDate) :
                new ObjectParameter("prdSellDate", typeof(string));
    
            var prdSellByParameter = prdSellBy != null ?
                new ObjectParameter("prdSellBy", prdSellBy) :
                new ObjectParameter("prdSellBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellInsert", prdTitleParameter, prdPriceParameter, prdQtyParameter, prdSellDateParameter, prdSellByParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellInsert(string prdTitle, string prdPrice, string prdQty, string prdSellDate, string prdSellBy, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdSellDateParameter = prdSellDate != null ?
                new ObjectParameter("prdSellDate", prdSellDate) :
                new ObjectParameter("prdSellDate", typeof(string));
    
            var prdSellByParameter = prdSellBy != null ?
                new ObjectParameter("prdSellBy", prdSellBy) :
                new ObjectParameter("prdSellBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellInsert", mergeOption, prdTitleParameter, prdPriceParameter, prdQtyParameter, prdSellDateParameter, prdSellByParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellSearch(Nullable<int> trxId)
        {
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellSearch", trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellSearch(Nullable<int> trxId, MergeOption mergeOption)
        {
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellSearch", mergeOption, trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellSelect");
        }
    
        public virtual ObjectResult<sell> SP_SellSelect(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellSelect", mergeOption);
        }
    
        public virtual ObjectResult<sell> SP_SellUpdate(string prdTitle, string prdPrice, string prdQty, string prdSellDate, string prdSellBy, Nullable<int> trxId)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdSellDateParameter = prdSellDate != null ?
                new ObjectParameter("prdSellDate", prdSellDate) :
                new ObjectParameter("prdSellDate", typeof(string));
    
            var prdSellByParameter = prdSellBy != null ?
                new ObjectParameter("prdSellBy", prdSellBy) :
                new ObjectParameter("prdSellBy", typeof(string));
    
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellUpdate", prdTitleParameter, prdPriceParameter, prdQtyParameter, prdSellDateParameter, prdSellByParameter, trxIdParameter);
        }
    
        public virtual ObjectResult<sell> SP_SellUpdate(string prdTitle, string prdPrice, string prdQty, string prdSellDate, string prdSellBy, Nullable<int> trxId, MergeOption mergeOption)
        {
            var prdTitleParameter = prdTitle != null ?
                new ObjectParameter("prdTitle", prdTitle) :
                new ObjectParameter("prdTitle", typeof(string));
    
            var prdPriceParameter = prdPrice != null ?
                new ObjectParameter("prdPrice", prdPrice) :
                new ObjectParameter("prdPrice", typeof(string));
    
            var prdQtyParameter = prdQty != null ?
                new ObjectParameter("prdQty", prdQty) :
                new ObjectParameter("prdQty", typeof(string));
    
            var prdSellDateParameter = prdSellDate != null ?
                new ObjectParameter("prdSellDate", prdSellDate) :
                new ObjectParameter("prdSellDate", typeof(string));
    
            var prdSellByParameter = prdSellBy != null ?
                new ObjectParameter("prdSellBy", prdSellBy) :
                new ObjectParameter("prdSellBy", typeof(string));
    
            var trxIdParameter = trxId.HasValue ?
                new ObjectParameter("trxId", trxId) :
                new ObjectParameter("trxId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sell>("SP_SellUpdate", mergeOption, prdTitleParameter, prdPriceParameter, prdQtyParameter, prdSellDateParameter, prdSellByParameter, trxIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupDelete(Nullable<int> supId)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupDelete", supIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupDelete(Nullable<int> supId, MergeOption mergeOption)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupDelete", mergeOption, supIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupInsert(string supName, string supCell, string supAddress)
        {
            var supNameParameter = supName != null ?
                new ObjectParameter("supName", supName) :
                new ObjectParameter("supName", typeof(string));
    
            var supCellParameter = supCell != null ?
                new ObjectParameter("supCell", supCell) :
                new ObjectParameter("supCell", typeof(string));
    
            var supAddressParameter = supAddress != null ?
                new ObjectParameter("supAddress", supAddress) :
                new ObjectParameter("supAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupInsert", supNameParameter, supCellParameter, supAddressParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupInsert(string supName, string supCell, string supAddress, MergeOption mergeOption)
        {
            var supNameParameter = supName != null ?
                new ObjectParameter("supName", supName) :
                new ObjectParameter("supName", typeof(string));
    
            var supCellParameter = supCell != null ?
                new ObjectParameter("supCell", supCell) :
                new ObjectParameter("supCell", typeof(string));
    
            var supAddressParameter = supAddress != null ?
                new ObjectParameter("supAddress", supAddress) :
                new ObjectParameter("supAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupInsert", mergeOption, supNameParameter, supCellParameter, supAddressParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupSearch(Nullable<int> supId)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupSearch", supIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupSearch(Nullable<int> supId, MergeOption mergeOption)
        {
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupSearch", mergeOption, supIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupSelect");
        }
    
        public virtual ObjectResult<supplyer> SP_SupSelect(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupSelect", mergeOption);
        }
    
        public virtual ObjectResult<supplyer> SP_SupUpdate(string supName, string supCell, string supAddress, Nullable<int> supId)
        {
            var supNameParameter = supName != null ?
                new ObjectParameter("supName", supName) :
                new ObjectParameter("supName", typeof(string));
    
            var supCellParameter = supCell != null ?
                new ObjectParameter("supCell", supCell) :
                new ObjectParameter("supCell", typeof(string));
    
            var supAddressParameter = supAddress != null ?
                new ObjectParameter("supAddress", supAddress) :
                new ObjectParameter("supAddress", typeof(string));
    
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupUpdate", supNameParameter, supCellParameter, supAddressParameter, supIdParameter);
        }
    
        public virtual ObjectResult<supplyer> SP_SupUpdate(string supName, string supCell, string supAddress, Nullable<int> supId, MergeOption mergeOption)
        {
            var supNameParameter = supName != null ?
                new ObjectParameter("supName", supName) :
                new ObjectParameter("supName", typeof(string));
    
            var supCellParameter = supCell != null ?
                new ObjectParameter("supCell", supCell) :
                new ObjectParameter("supCell", typeof(string));
    
            var supAddressParameter = supAddress != null ?
                new ObjectParameter("supAddress", supAddress) :
                new ObjectParameter("supAddress", typeof(string));
    
            var supIdParameter = supId.HasValue ?
                new ObjectParameter("supId", supId) :
                new ObjectParameter("supId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<supplyer>("SP_SupUpdate", mergeOption, supNameParameter, supCellParameter, supAddressParameter, supIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserAccess(string userAccess)
        {
            var userAccessParameter = userAccess != null ?
                new ObjectParameter("userAccess", userAccess) :
                new ObjectParameter("userAccess", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserAccess", userAccessParameter);
        }
    
        public virtual ObjectResult<user> SP_UserAccess(string userAccess, MergeOption mergeOption)
        {
            var userAccessParameter = userAccess != null ?
                new ObjectParameter("userAccess", userAccess) :
                new ObjectParameter("userAccess", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserAccess", mergeOption, userAccessParameter);
        }
    
        public virtual ObjectResult<user> SP_UserDelete(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserDelete", userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserDelete(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserDelete", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserInsert(string userName, string userCell, string userAddress, string userCnic, string userEmail, string access_level, string userPass)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userCellParameter = userCell != null ?
                new ObjectParameter("userCell", userCell) :
                new ObjectParameter("userCell", typeof(string));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("userAddress", userAddress) :
                new ObjectParameter("userAddress", typeof(string));
    
            var userCnicParameter = userCnic != null ?
                new ObjectParameter("userCnic", userCnic) :
                new ObjectParameter("userCnic", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var access_levelParameter = access_level != null ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserInsert", userNameParameter, userCellParameter, userAddressParameter, userCnicParameter, userEmailParameter, access_levelParameter, userPassParameter);
        }
    
        public virtual ObjectResult<user> SP_UserInsert(string userName, string userCell, string userAddress, string userCnic, string userEmail, string access_level, string userPass, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userCellParameter = userCell != null ?
                new ObjectParameter("userCell", userCell) :
                new ObjectParameter("userCell", typeof(string));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("userAddress", userAddress) :
                new ObjectParameter("userAddress", typeof(string));
    
            var userCnicParameter = userCnic != null ?
                new ObjectParameter("userCnic", userCnic) :
                new ObjectParameter("userCnic", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var access_levelParameter = access_level != null ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserInsert", mergeOption, userNameParameter, userCellParameter, userAddressParameter, userCnicParameter, userEmailParameter, access_levelParameter, userPassParameter);
        }
    
        public virtual ObjectResult<user> SP_UserPassUpdate(string userPass, Nullable<int> userId)
        {
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserPassUpdate", userPassParameter, userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserPassUpdate(string userPass, Nullable<int> userId, MergeOption mergeOption)
        {
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserPassUpdate", mergeOption, userPassParameter, userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserSearch(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserSearch", userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserSearch(Nullable<int> userId, MergeOption mergeOption)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserSearch", mergeOption, userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserSelect");
        }
    
        public virtual ObjectResult<user> SP_UserSelect(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserSelect", mergeOption);
        }
    
        public virtual ObjectResult<user> SP_UserUpdate(string userName, string userCell, string userAddress, string userCnic, string userEmail, string access_level, string userPass, Nullable<int> userId)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userCellParameter = userCell != null ?
                new ObjectParameter("userCell", userCell) :
                new ObjectParameter("userCell", typeof(string));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("userAddress", userAddress) :
                new ObjectParameter("userAddress", typeof(string));
    
            var userCnicParameter = userCnic != null ?
                new ObjectParameter("userCnic", userCnic) :
                new ObjectParameter("userCnic", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var access_levelParameter = access_level != null ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserUpdate", userNameParameter, userCellParameter, userAddressParameter, userCnicParameter, userEmailParameter, access_levelParameter, userPassParameter, userIdParameter);
        }
    
        public virtual ObjectResult<user> SP_UserUpdate(string userName, string userCell, string userAddress, string userCnic, string userEmail, string access_level, string userPass, Nullable<int> userId, MergeOption mergeOption)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var userCellParameter = userCell != null ?
                new ObjectParameter("userCell", userCell) :
                new ObjectParameter("userCell", typeof(string));
    
            var userAddressParameter = userAddress != null ?
                new ObjectParameter("userAddress", userAddress) :
                new ObjectParameter("userAddress", typeof(string));
    
            var userCnicParameter = userCnic != null ?
                new ObjectParameter("userCnic", userCnic) :
                new ObjectParameter("userCnic", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var access_levelParameter = access_level != null ?
                new ObjectParameter("access_level", access_level) :
                new ObjectParameter("access_level", typeof(string));
    
            var userPassParameter = userPass != null ?
                new ObjectParameter("userPass", userPass) :
                new ObjectParameter("userPass", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<user>("SP_UserUpdate", mergeOption, userNameParameter, userCellParameter, userAddressParameter, userCnicParameter, userEmailParameter, access_levelParameter, userPassParameter, userIdParameter);
        }
    }
}
